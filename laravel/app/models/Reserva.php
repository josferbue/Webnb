<?phpclass Reserva extends Eloquent {    protected $table = 'reservas';	public function fecha_ini(){        return $this->fecha_ini;    }    public function fecha_fin(){        return $this->fecha_fin;    }    public function nombre(){        return $this->nombre;    }    public function email(){        return $this->email;    }    public function telefono(){        return $this->telefono;    }    public function dni(){        return $this->dni;    }    public function adultos(){        return $this->adultos;    }    public function ninos(){        return $this->ninos;    }    public function precio(){        return $this->precio;    }    public function observaciones(){        return $this->observaciones;    }    public function created_at(){        return $this->created_at;    }    public function updated_at(){        return $this->updated_at;    }    public static function validate($input){        $rule_date =    'sometimes|required|date|before:fecha_fin';        if(isset($input['fecha_ini']) && isset($input['fecha_fin']) && $input['fecha_ini'] == $input['fecha_fin'])            $rule_date = 'sometimes|required|date';        $rules = array(            'fecha_fin'         =>  array('sometimes', 'required', 'date'),            'fecha_ini'         =>  $rule_date,            'nombre'            =>  array('required', 'max:255'),            'email'             =>  array('required', 'email', 'max:255'),            'telefono'          =>  array('regex:/^\d{9}$/'),            'dni'               =>  array('required'),            'adultos'           =>  array('required', 'integer', 'min:1', 'max:8'),            'ninos'             =>  array('required', 'integer', 'min:0', 'max:4'),            //'precio'            =>  array('required', 'numeric', 'min:0')            'fecha_nacimiento'  =>  'required|date',            'fecha_expedicion'  =>  'required|date',            'pais_nacionalidad' =>  'required',        );        $messages = array(            'required'  =>      'Este campo debe ser rellenado.',            'email'     =>      'Este campo debe tener el formato de un email.',            'integer'   =>      'Este campo debe ser solamente numérico.',            'min'       =>      'Este campo debe tener al menos :min carácteres.',            'max'       =>      'Este campo debe tener como máximo :max carácteres.',            'regex'     =>      'Este campo no tiene un formato válido.',            'adultos.min'   =>  'El número de adultos no puede ser menor a :min.',            'adultos.max'   =>  'El número de adultos no puede ser superior a :max.',            'ninos.min'     =>  'El número de niños no puede ser menor a :min.',            'ninos.max'     =>  'El número de niños no puede ser superior a :max.',            'precio.min'    =>  'El precio no puede ser menor a : min.',            'date'          =>  'El formato de fecha no es válido.',            'fecha_ini.before'   =>  'La fecha de inicio no puede ser superior a la final.',            'pais_nacionalidad.required'    =>  'El campo país es requerido'        );        $validator = Validator::make(            $input,            $rules,            $messages        );        return $validator;    }    public static function validate_dates_reserva($fecha_ini, $fecha_fin){        $hoy = date('y-m-d');        $fechafin = strtotime ( '+2 year' , strtotime ( $hoy ) ) ;        $fechafin = date ( 'y-m-d' , $fechafin );        $data = array(            'fecha_ini'   => $fecha_ini,            'fecha_fin'   => $fecha_fin,            'success'     => 1        );        $fecha_ini  =   new DateTime($fecha_ini);        $fecha_fin  =   new DateTime($fecha_fin);        $ch = curl_init("https://api.airbnb.com/v1/authorize");        curl_setopt($ch, CURLOPT_POST,true);        curl_setopt($ch, CURLOPT_POSTFIELDS, "client_id=3092nxybyb0otqw18e8nh5nty&locale=es-ES&currency=EUR&grant_type=password&password=alojamiento16&username=cristina@synergia.es");        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);        $response = curl_exec($ch);        curl_close($ch);        $access = json_decode($response,true);        $fechas_no_disponibles = null;        if($access != null and array_key_exists("access_token",$access)) {            $url = "https://api.airbnb.com/v2/batch/?client_id=3092nxybyb0otqw18e8nh5nty&locale=es-ES&currency=EUR";            $data_json = '{"operations":[{"method":"GET","path":"/calendar_days","query":{"start_date":"'.$hoy.'","listing_id":"12878755","_format":"host_calendar","end_date":"'.$fechafin.'"}},{"method":"GET","path":"/dynamic_pricing_controls/12878755","query":{}}],"_transaction":false}';            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Airbnb-OAuth-Token: '.$access["access_token"],'Content-Type: application/json; charset=UTF-8','Content-Length: ' . strlen($data_json)));            curl_setopt($ch, CURLOPT_POST, true);            curl_setopt($ch, CURLOPT_POSTFIELDS,$data_json);            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            $response  = curl_exec($ch);            curl_close($ch);            $calendar_days = json_decode($response,true)["operations"][0]["response"]["calendar_days"];            $fechas_no_disponibles = array();            foreach($calendar_days as $dia){                if(!$dia["available"]){                    $fecha_no_disponible = new DateTime($dia["date"]);                    if($fecha_no_disponible >= $fecha_ini && $fecha_no_disponible < $fecha_fin) {                        $data['success'] = 0;                    }                }            }        }        return $data;    }    public static function unavailables(){        $hoy = date('y-m-d');        $fechafin = strtotime ( '+2 year' , strtotime ( $hoy ) ) ;        $fechafin = date ( 'y-m-d' , $fechafin );        $ch = curl_init("https://api.airbnb.com/v1/authorize");        curl_setopt($ch, CURLOPT_POST,true);        curl_setopt($ch, CURLOPT_POSTFIELDS, "client_id=3092nxybyb0otqw18e8nh5nty&locale=es-ES&currency=EUR&grant_type=password&password=alojamiento16&username=cristina@synergia.es");        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);        $response = curl_exec($ch);        curl_close($ch);        $access = json_decode($response,true);        $unavailable = null;        if($access != null and array_key_exists("access_token",$access)) {            $url = "https://api.airbnb.com/v2/batch/?client_id=3092nxybyb0otqw18e8nh5nty&locale=es-ES&currency=EUR";            $data_json = '{"operations":[{"method":"GET","path":"/calendar_days","query":{"start_date":"'.$hoy.'","listing_id":"12878755","_format":"host_calendar","end_date":"'.$fechafin.'"}},{"method":"GET","path":"/dynamic_pricing_controls/12878755","query":{}}],"_transaction":false}';            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Airbnb-OAuth-Token: '.$access["access_token"],'Content-Type: application/json; charset=UTF-8','Content-Length: ' . strlen($data_json)));            curl_setopt($ch, CURLOPT_POST, true);            curl_setopt($ch, CURLOPT_POSTFIELDS,$data_json);            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            $response  = curl_exec($ch);            curl_close($ch);            $calendar_days = json_decode($response,true)["operations"][0]["response"]["calendar_days"];            $unavailable = array();            foreach($calendar_days as $dia){                if(!$dia["available"]){                    array_push($unavailable,$dia["date"]);                }            }        }        return $unavailable;    }    public static function precio_dates($fecha_ini,$fecha_fin){        $precio = 0.0;        $intervalos_pisados   = DB::table('configuraciones')            ->whereNotNull('fecha_ini')->whereNotNull('fecha_fin')            ->where('fecha_ini', '>', $fecha_ini)            ->where('fecha_fin', '<', $fecha_fin)            ->orderBy('fecha_ini', 'DESC')            ->get();        $intervalo_entandar = Configuracion::where('alias','like','Estándar')->first();        $intervalo1 = Configuracion::where('fecha_ini','<=',$fecha_ini)->where('fecha_fin','>=',$fecha_ini)->first();        $intervalo2 = Configuracion::where('fecha_ini','<=',$fecha_fin)->where('fecha_fin','>=',$fecha_fin)->first();        if($intervalo1 == null){            $intervalo1 = new Configuracion;            $intervalo1->id = -1;        }        if($intervalo2 == null){            $intervalo2 = new Configuracion;            $intervalo2->id = -2;        }        $dias = Reserva::difDias($fecha_ini,$fecha_fin);        $dias_totales = 0;        if($dias < 7){            if(($intervalo1->id != $intervalo2->id)) {                $precio = ($intervalo1->precio_noche_adicional * Reserva::difDias($fecha_ini,$intervalo1->fecha_fin == null ? null : date ( 'Y-m-d' ,strtotime ('+1 day' , strtotime($intervalo1->fecha_fin))))) + ($intervalo2->precio_noche_adicional *  Reserva::difDias($intervalo2->fecha_ini, $fecha_fin));                $dias_totales +=  Reserva::difDias($fecha_ini,$intervalo1->fecha_fin == null ? null : date ( 'Y-m-d' ,strtotime ('+1 day' , strtotime($intervalo1->fecha_fin)))) +  Reserva::difDias($intervalo2->fecha_ini, $fecha_fin);            }else{                $precio = ($intervalo1->precio_noche_adicional * $dias);                $dias_totales += $dias;            }        }else{            if($intervalo1->id != $intervalo2->id) {                $precio = (($intervalo1->precio_semana/7) * Reserva::difDias($fecha_ini,$intervalo1->fecha_fin == null ? null : date ( 'Y-m-d' ,strtotime ('+1 day' , strtotime($intervalo1->fecha_fin))))) + (($intervalo2->precio_semana/7) * Reserva::difDias($intervalo2->fecha_ini, $fecha_fin));                $dias_totales += Reserva::difDias($fecha_ini,$intervalo1->fecha_fin == null ? null : date ( 'Y-m-d' ,strtotime ('+1 day' , strtotime($intervalo1->fecha_fin)))) + Reserva::difDias($intervalo2->fecha_ini, $fecha_fin);            }else{                $precio = (($intervalo1->precio_semana/7) * $dias);                $dias_totales += $dias;            }        }        foreach($intervalos_pisados as $intervalo_pisado){            $dias_int = Reserva::difDias($intervalo_pisado->fecha_ini,$intervalo_pisado->fecha_fin == null ? null : date ( 'Y-m-d' ,strtotime ('+1 day' , strtotime($intervalo_pisado->fecha_fin))));            if($dias < 7){                $precio += $intervalo_pisado->precio_noche_adicional * $dias_int;            }else{                $precio += ($intervalo_pisado->precio_semana/7) * $dias_int;            }            $dias_totales += $dias_int;        }        if($dias < 7){            $precio += $intervalo_entandar->precio_noche_adicional * ($dias - $dias_totales);        }else{            $precio += ($intervalo_entandar->precio_semana/7) * ($dias - $dias_totales);        }        $precio = number_format($precio,2,".","" );        return $precio;    }    public static function difDias($fecha_ini,$fecha_fin){        if($fecha_ini == null or $fecha_fin == null){            return 0;        }        $dias	= (strtotime($fecha_ini)-strtotime($fecha_fin))/86400;        $dias 	= abs($dias);        $dias = floor($dias);        return $dias;    }}